'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  options = options || {};
  //dir root of resource
  options.root = _path2.default.resolve(options.root || process.cwd());
  //url path to resource
  options.path = options.path || '/';

  /*if (typeof options.root != 'string') {
    throw Error('serve root must be a string!')
  }*/

  return function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(ctx, next) {
      var reqPath, basePath, filePath, result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              reqPath = ctx.path;
              basePath = options.path;

              // basePath not a prefix of reqPath
              // basePath: /ab/cd
              // will match /ab/cd/**
              // but /ab/cde

              if (!(reqPath.indexOf(basePath) !== 0 || basePath.slice(-1) !== '/' && reqPath.charAt(basePath.length) !== '/')) {
                _context.next = 6;
                break;
              }

              _context.next = 5;
              return next();

            case 5:
              return _context.abrupt('return', _context.sent);

            case 6:
              if (/GET|HEAD/.test(ctx.method)) {
                _context.next = 11;
                break;
              }

              ctx.status = 405;
              ctx.set('Allow', 'GET, HEAD');
              ctx.set('Content-Length', '0');
              return _context.abrupt('return');

            case 11:
              _context.prev = 11;
              filePath = reqPath.slice(basePath.length);
              _context.next = 15;
              return (0, _koaSend2.default)(ctx, filePath, options);

            case 15:
              result = _context.sent;

              if (!result) {
                ctx.status = 404;
              }
              _context.next = 22;
              break;

            case 19:
              _context.prev = 19;
              _context.t0 = _context['catch'](11);

              ctx.status = 404;

            case 22:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[11, 19]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};

var _koaSend = require('koa-send');

var _koaSend2 = _interopRequireDefault(_koaSend);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 *
 * @param options
 * @returns {*}
 */