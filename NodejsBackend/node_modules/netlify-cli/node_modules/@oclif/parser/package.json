{
  "_args": [
    [
      "@oclif/parser@https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
      "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli"
    ]
  ],
  "_from": "@oclif/parser@https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
  "_id": "@oclif/parser@3.7.0",
  "_inCache": true,
  "_location": "/netlify-cli/@oclif/parser",
  "_phantomChildren": {},
  "_requested": {
    "name": "@oclif/parser",
    "raw": "@oclif/parser@https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
    "rawSpec": "https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
    "scope": "@oclif",
    "spec": "https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/netlify-cli/@oclif/command"
  ],
  "_resolved": "https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
  "_shasum": "cda3eea341e87cc7390511cf369a0126d0b39a93",
  "_shrinkwrap": null,
  "_spec": "@oclif/parser@https://registry.npmjs.org/@oclif/parser/-/parser-3.7.0.tgz",
  "_where": "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli",
  "author": {
    "name": "Jeff Dickey @jdxcode"
  },
  "bugs": {
    "url": "https://github.com/oclif/parser/issues"
  },
  "dependencies": {
    "@oclif/linewrap": "^1.0.0",
    "chalk": "^2.4.1",
    "tslib": "^1.9.3"
  },
  "description": "arg and flag parser for oclif",
  "devDependencies": {
    "@oclif/errors": "^1.2.2",
    "@oclif/tslint": "^3.1.0",
    "@types/chai": "^4.1.6",
    "@types/mocha": "^5.2.5",
    "@types/nock": "^9.3.0",
    "@types/node": "^10.11.7",
    "@types/node-notifier": "^0.0.28",
    "@types/read-pkg": "^3.0.0",
    "chai": "^4.2.0",
    "eslint": "^5.7.0",
    "eslint-config-oclif": "^3.1.0",
    "mocha": "^5.2.0",
    "ts-node": "^7.0.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.3"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "/lib"
  ],
  "homepage": "https://github.com/oclif/parser",
  "keywords": [
    "oclif"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "@oclif/parser",
  "optionalDependencies": {},
  "readme": "@oclif/parser\n=============\n\narg and flag parser for oclif\n\n[![Version](https://img.shields.io/npm/v/@oclif/parser.svg)](https://npmjs.org/package/@oclif/parser)\n[![CircleCI](https://circleci.com/gh/oclif/parser/tree/master.svg?style=svg)](https://circleci.com/gh/oclif/parser/tree/master)\n[![Appveyor CI](https://ci.appveyor.com/api/projects/status/github/oclif/parser?branch=master&svg=true)](https://ci.appveyor.com/project/heroku/parser/branch/master)\n[![Codecov](https://codecov.io/gh/oclif/parser/branch/master/graph/badge.svg)](https://codecov.io/gh/oclif/parser)\n[![Known Vulnerabilities](https://snyk.io/test/npm/@oclif/parser/badge.svg)](https://snyk.io/test/npm/@oclif/parser)\n[![Downloads/week](https://img.shields.io/npm/dw/@oclif/parser.svg)](https://npmjs.org/package/@oclif/parser)\n[![License](https://img.shields.io/npm/l/@oclif/parser.svg)](https://github.com/oclif/parser/blob/master/package.json)\n\nCLI flag parser.\n\nUsage:\n\n```js\nconst CLI = require('cli-flags')\n\nconst {flags, args} = CLI.parse({\n  flags: {\n    'output-file': CLI.flags.string({char: 'o'}),\n    force: CLI.flags.boolean({char: 'f'})\n  },\n  args: [\n    {name: 'input', required: true}\n  ]\n})\n\nif (flags.force) {\n  console.log('--force was set')\n}\n\nif (flags['output-file']) {\n  console.log(`output file is: ${flags['output-file']}`)\n}\n\nconsole.log(`input arg: ${args.input}`)\n\n// $ node example.js -f myinput --output-file=myexample.txt\n// --force was set\n// output file is: myexample.txt\n// input arg: myinput\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oclif/parser.git"
  },
  "scripts": {
    "build": "rm -rf lib && tsc",
    "lint": "yarn run build && eslint . && tsc -p test --noEmit && tslint -p test",
    "posttest": "yarn run lint",
    "prepublishOnly": "yarn run build",
    "test": "mocha --forbid-only \"test/**/*.test.ts\""
  },
  "types": "lib/index.d.ts",
  "version": "3.7.0"
}
