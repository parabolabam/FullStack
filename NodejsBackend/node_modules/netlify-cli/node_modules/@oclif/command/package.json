{
  "_args": [
    [
      "@oclif/command@https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
      "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli"
    ]
  ],
  "_from": "@oclif/command@https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
  "_id": "@oclif/command@1.5.4",
  "_inCache": true,
  "_location": "/netlify-cli/@oclif/command",
  "_phantomChildren": {},
  "_requested": {
    "name": "@oclif/command",
    "raw": "@oclif/command@https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
    "rawSpec": "https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
    "scope": "@oclif",
    "spec": "https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/netlify-cli",
    "/netlify-cli/@oclif/plugin-help",
    "/netlify-cli/@oclif/plugin-not-found"
  ],
  "_resolved": "https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
  "_shasum": "659456def965454e1c0115e8265533980eefb200",
  "_shrinkwrap": null,
  "_spec": "@oclif/command@https://registry.npmjs.org/@oclif/command/-/command-1.5.4.tgz",
  "_where": "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli",
  "author": {
    "name": "Jeff Dickey @jdxcode"
  },
  "bugs": {
    "url": "https://github.com/oclif/command/issues"
  },
  "dependencies": {
    "@oclif/errors": "^1.2.2",
    "@oclif/parser": "^3.6.1",
    "debug": "^4.1.0",
    "semver": "^5.6.0"
  },
  "description": "oclif base command",
  "devDependencies": {
    "@oclif/config": "^1.8.7",
    "@oclif/plugin-help": "^2.1.2",
    "@oclif/plugin-plugins": "^1.7.2",
    "@oclif/tslint": "^3.1.0",
    "@types/chai": "^4.1.6",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.11.7",
    "@types/semver": "^5.5.0",
    "chai": "^4.2.0",
    "cli-ux": "^4.9.0",
    "fancy-test": "^1.4.1",
    "globby": "^8.0.1",
    "mocha": "^5.2.0",
    "ts-node": "^7.0.1",
    "tslint": "^5.11.0",
    "typescript": "^3.1.3"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "/flush.js",
    "/lib"
  ],
  "homepage": "https://github.com/oclif/command",
  "keywords": [
    "oclif"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "@oclif/command",
  "oclif": {
    "devPlugins": [
      "@oclif/plugin-help",
      "@oclif/plugin-plugins"
    ]
  },
  "optionalDependencies": {},
  "readme": "@oclif/command\n===============\n\noclif base command\n\n[![Version](https://img.shields.io/npm/v/@oclif/command.svg)](https://npmjs.org/package/@oclif/command)\n[![CircleCI](https://circleci.com/gh/oclif/command/tree/master.svg?style=shield)](https://circleci.com/gh/oclif/command/tree/master)\n[![Appveyor CI](https://ci.appveyor.com/api/projects/status/github/oclif/command?branch=master&svg=true)](https://ci.appveyor.com/project/heroku/command/branch/master)\n[![Codecov](https://codecov.io/gh/oclif/command/branch/master/graph/badge.svg)](https://codecov.io/gh/oclif/command)\n[![Known Vulnerabilities](https://snyk.io/test/npm/@oclif/command/badge.svg)](https://snyk.io/test/npm/@oclif/command)\n[![Downloads/week](https://img.shields.io/npm/dw/@oclif/command.svg)](https://npmjs.org/package/@oclif/command)\n[![License](https://img.shields.io/npm/l/@oclif/command.svg)](https://github.com/oclif/command/blob/master/package.json)\n\nThis is about half of the main codebase for oclif. The other half lives in [@oclif/config](https://github.com/oclif/config). This can be used directly, but it probably makes more sense to build your CLI with the [generator](https://github.com/oclif/oclif).\n\nUsage\n=====\n\nWithout the generator, you can create a simple CLI like this:\n\n**TypeScript**\n```js\n#!/usr/bin/env ts-node\n\nimport * as fs from 'fs'\nimport {Command, flags} from '@oclif/command'\n\nclass LS extends Command {\n  static flags = {\n    version: flags.version(),\n    help: flags.help(),\n    // run with --dir= or -d=\n    dir: flags.string({\n      char: 'd',\n      default: process.cwd(),\n    }),\n  }\n\n  async run() {\n    const {flags} = this.parse(LS)\n    let files = fs.readdirSync(flags.dir)\n    for (let f of files) {\n      this.log(f)\n    }\n  }\n}\n\nLS.run()\n.catch(require('@oclif/errors/handle'))\n```\n\n**JavaScript**\n```js\n#!/usr/bin/env node\n\nconst fs = require('fs')\nconst {Command, flags} = require('@oclif/command')\n\nclass LS extends Command {\n  async run() {\n    const {flags} = this.parse(LS)\n    let files = fs.readdirSync(flags.dir)\n    for (let f of files) {\n      this.log(f)\n    }\n  }\n}\n\nLS.flags = {\n  version: flags.version(),\n  help: flags.help(),\n  // run with --dir= or -d=\n  dir: flags.string({\n    char: 'd',\n    default: process.cwd(),\n  }),\n}\n\nLS.run()\n.catch(require('@oclif/errors/handle'))\n```\n\nThen run either of these with:\n\n```sh-session\n$ ./myscript\n...files in current dir...\n$ ./myscript --dir foobar\n...files in ./foobar...\n$ ./myscript --version\nmyscript/0.0.0 darwin-x64 node-v9.5.0\n$ ./myscript --help\nUSAGE\n  $ @oclif/command\n\nOPTIONS\n  -d, --dir=dir  [default: /Users/jdickey/src/github.com/oclif/command]\n  --help         show CLI help\n  --version      show CLI version\n```\n\nSee the [generator](https://github.com/oclif/oclif) for all the options you can pass to the command.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oclif/command.git"
  },
  "scripts": {
    "build": "rm -rf lib && tsc",
    "lint": "tsc -p test --noEmit && tslint -p test -t stylish",
    "posttest": "yarn run lint",
    "prepublishOnly": "yarn run build",
    "test": "mocha --forbid-only \"test/**/*.test.ts\""
  },
  "types": "lib/index.d.ts",
  "version": "1.5.4"
}
