{
  "_args": [
    [
      "netlify@https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
      "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli"
    ]
  ],
  "_from": "netlify@https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
  "_id": "netlify@2.2.0",
  "_inCache": true,
  "_location": "/netlify-cli/netlify",
  "_phantomChildren": {},
  "_requested": {
    "name": "netlify",
    "raw": "netlify@https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
    "rawSpec": "https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/netlify-cli"
  ],
  "_resolved": "https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
  "_shasum": "081e4fc2c6413847c40594bfcbfe25b95b3bba74",
  "_shrinkwrap": null,
  "_spec": "netlify@https://registry.npmjs.org/netlify/-/netlify-2.2.0.tgz",
  "_where": "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli",
  "author": {
    "name": "Netlify Inc."
  },
  "ava": {
    "babel": false,
    "cache": true,
    "compileEnhancements": false,
    "concurrency": 5,
    "failFast": false,
    "failWithoutAssertions": false,
    "files": [
      "src/**/*.test.js"
    ],
    "tap": false
  },
  "browser": {
    "./src/deploy/index.js": "./src/deploy/index.browser.js"
  },
  "bugs": {
    "url": "https://github.com/netlify/js-client/issues"
  },
  "contributors": [
    {
      "name": "Mathias Biilmann",
      "email": "matt@netlify.com",
      "url": "https://twitter.com/biilmann"
    },
    {
      "name": "David Calavera",
      "email": "david@netlify.com",
      "url": "https://twitter.com/calavera"
    },
    {
      "name": "David Wells",
      "email": "david.wells@netlify.com",
      "url": "https://davidwells.io/"
    },
    {
      "name": "Bret Comnes",
      "email": "bcomnes@gmail.com",
      "url": "https://bret.io"
    }
  ],
  "dependencies": {
    "@netlify/open-api": "^0.5.0",
    "archiver": "^3.0.0",
    "backoff": "^2.5.0",
    "clean-deep": "^3.0.2",
    "flush-write-stream": "^1.0.3",
    "folder-walker": "^3.2.0",
    "from2-array": "0.0.4",
    "hasha": "^3.0.0",
    "lodash.camelcase": "^4.3.0",
    "lodash.flatten": "^4.4.0",
    "lodash.get": "^4.4.2",
    "lodash.set": "^4.3.2",
    "micro-api-client": "^3.3.0",
    "node-fetch": "^2.2.0",
    "p-map": "^2.0.0",
    "p-wait-for": "^2.0.0",
    "parallel-transform": "^1.1.0",
    "pump": "^3.0.0",
    "qs": "^6.5.2",
    "tempy": "^0.2.1",
    "through2-filter": "^3.0.0",
    "through2-map": "^3.0.0",
    "util.promisify": "^1.0.0",
    "util.promisify-all": "^1.0.2"
  },
  "description": "Netlify Node.js API client",
  "devDependencies": {
    "@babel/core": "^7.1.2",
    "@babel/plugin-transform-runtime": "^7.1.0",
    "@babel/preset-env": "^7.1.0",
    "@babel/runtime": "^7.1.2",
    "ava": "1.0.0-beta.7",
    "babel-eslint": "^9.0.0",
    "babel-loader": "^8.0.4",
    "body": "^5.1.0",
    "coveralls": "^3.0.2",
    "dependency-check": "^3.2.1",
    "eslint": "^5.5.0",
    "eslint-config-prettier": "^3.0.1",
    "eslint-plugin-import": "^2.13.0",
    "eslint-plugin-node": "^7.0.1",
    "eslint-plugin-prettier": "^2.6.1",
    "from2-string": "^1.1.0",
    "npm-run-all": "^4.1.3",
    "nyc": "^13.0.1",
    "prettier": "^1.13.7",
    "rimraf": "^2.6.2",
    "webpack": "^4.20.2",
    "webpack-cli": "^3.1.2"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "dist",
    "src"
  ],
  "homepage": "https://github.com/netlify/js-client",
  "keywords": [
    "api client",
    "js client",
    "netlify",
    "node client"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "netlify",
  "optionalDependencies": {},
  "readme": "# netlify/js-client\n[![npm version][npm-img]][npm] [![build status][travis-img]][travis] [![windows build status][av-img]][av]\n[![coverage][coverage-img]][coverage] [![dependencies][david-img]][david] [![downloads][dl-img]][dl]\n\nA Netlify [open-api](https://github.com/netlify/open-api) client that works in the browser and Node.js.\n\n## Usage\n\n```js\nconst NetlifyAPI = require('netlify')\nconst client = new NetlifyAPI('1234myAccessToken')\nconst sites = await client.listSites()\n```\n\n## API\n\n### `client = new NetlifyAPI([accessToken], [opts])`\n\nCreate a new instance of the Netlify API client with the provided `accessToken`.\n\n`accessToken` is optional.  Without it, you can't make authorized requests.\n\n`opts` includes:\n\n```js\n{\n  userAgent: 'netlify/js-client',\n  scheme: 'https',\n  host: 'api.netlify.com',\n  pathPrefix: '/api/v1',\n  globalParams: {} // parameters you want available for every request.\n  // Global params are only sent of the open-api spec specifies the provided params.\n}\n```\n\n### `client.accessToken`\n\nA setter/getter that returns the `accessToken` that the client is configured to use. You can set this after the class is instantiated, and all subsequent calls will use the newly set `accessToken`.\n\n### `client.basePath`\n\nA getter that returns the formatted base URL of the endpoint the client is configured to use.\n\n### Open API Client methods\n\nThe client is dynamically generated from the [open-api](https://github.com/netlify/open-api) definition file. Each method is is named after the `operationId` name of each endpoint action. **To see list of available operations see the [open-api website](https://open-api.netlify.com/)**.\n\nEvery open-api method has the following signature:\n\n#### `promise(response) = client.operationId([params], [opts])`\n\nPerform a call to the given endpoint corresponding with the `operationId`. Returns promise that will resolve with the body of the response, or reject with an error with details about the request attached. Rejects if the `status` > 400. Successful response objects have `status` and `statusText` properties on their prototype.\n\n- `params` is an object that includes any of the required or optional endpoint parameters.  \n- `params.body` should be an object which gets serialized to JSON automatically.  \n- If the endpoint accepts `binary`, `params.body` can be a Node.js readable stream.\n\n```js\n// example params\n{\n  any_param_needed,\n  paramsCanAlsoBeCamelCase,\n  body: {\n    an: 'arbitrary js object'\n  }\n}\n```\n\nOptional `opts` can include any property you want passed to `node-fetch`. The `headers` property is merged with some `defaultHeaders`.\n\n```js\n// example opts\n{\n  headers: { // Default headers\n    'User-agent': 'netlify-js-client',\n    accept: 'application/json'\n  }\n  // any other properties for node-fetch\n}\n```\n\nAll methods are conveniently consumed with async/await:\n\n```js\nasync function getSomeData () {\n  // Calls may fail!\n  try {\n    return await client.getSiteDeploy({\n      siteId: '1234abcd',\n      deploy_id: '4567'\n    })\n  } catch (e) {\n    // handle error\n  }\n}\n```\n\nIf the request response includes `json` in the `contentType` header, fetch will deserialize the JSON body. Otherwise the `text` of the response is returned.\n\n### API Flow Methods\n\nSome methods have been added in addition to the open API methods that make certain actions simpler to perform.\n\n#### `promise(accessToken) = client.getAccessToken(ticket, [opts])`\n\nPass in a [`ticket`](https://open-api.netlify.com/#model-ticket) and get back an `accessToken`. Call this with the response from a `client.createTicket({ client_id })` call. Automatically sets the `accessToken` to `this.accessToken` and returns `accessToken` for the consumer to save for later.\n\nOptional `opts` include:\n\n```js\n{\n  poll: 1000, // number of ms to wait between polling\n  timeout: 3.6e6 // number of ms to wait before timing out\n}\n```\n\nSee the [authenticating](https://www.netlify.com/docs/api/#authenticating) docs for more context.\n\n```js\n// example:\nasync function login () {\n  const ticket = await api.createTicket({\n    clientId: CLIENT_ID\n  })\n  // Open browser for authentication\n  await openBrowser(`https://app.netlify.com/authorize?response_type=ticket&ticket=${ticket.id}`)\n  const accessToken = await api.getAccessToken(ticket)\n  // API is also set up to use the returned access token as a side effect \n  return accessToken // Save this for later so you can quickly set up an authenticated client\n}\n```\n\n#### `promise(deploy) = client.deploy(siteId, buildDir, [opts])`\n\n**Node.js Only**: Pass in a `siteId`, a `buildDir` (the folder you want to deploy) and an options object to deploy the contents of that folder.\nSometimes this method needs to write to a `tmpDir`.  By default `tmpDir` is a folder in the system temporary directory.\n\nThe following paths can be passed in the options:\n\n- `configPath` (path to a `netlify.toml` file that includes redirect rules for the deploy, etc.)\n- `functionsDir` (a folder with lambda functions to deploy)\n\nOptional `opts` include:\n\n```js\n{\n  functionsDir: null, // path to a folder of functions to deploy\n  configPath: null, // path to a netlify.toml file to include in the deploy (e.g. redirect support for manual deploys)\n  draft: false, // draft deploy or production deploy\n  message: undefined, // a short message to associate with the deploy\n  deployTimeout: 1.2e6, // 20 mins\n  parallelHash: 100, // number of parallel hashing calls\n  parallelUpload: 15, // number of files to upload in parallel\n  maxRetry: 5, // number of times to try on failed file uploads\n  filter: filepath => { /* return false to filter a file  from the deploy */ },\n  tmpDir: tempy.directory(), // a temporary directory to zip functions into\n  statusCb: statusObj => {\n    // a callback function to receive status events\n    /* statusObj: {\n            type: name-of-step\n            msg: msg to print\n            phase: [start, progress, stop]\n        } */\n    // See https://github.com/netlify/cli/blob/v2.0.0-beta.3/src/commands/deploy.js#L161-L195\n    // for an example of how this can be used.\n  }\n }\n```\n\n## UMD Builds\n\nA UMD build is provided for your convenience, however browser support is still experimental.  Contributions to improve browser support are welcome.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more info on how to make contributions to this project.\n\n## License\n\nMIT. See [LICENSE](LICENSE) for more details.\n\n[npm-img]: https://img.shields.io/npm/v/netlify.svg\n[npm]: https://npmjs.org/package/netlify\n[travis-img]: https://img.shields.io/travis/netlify/js-client/master.svg\n[travis]: https://travis-ci.org/netlify/js-client\n[av-img]: https://ci.appveyor.com/api/projects/status/6lw5yqvl4plm1utb/branch/master?svg=true\n[av]: https://ci.appveyor.com/project/netlify/js-client\n[dl-img]: https://img.shields.io/npm/dm/netlify.svg\n[dl]: https://npmjs.org/package/netlify\n[coverage-img]: https://img.shields.io/coveralls/netlify/js-client/master.svg\n[coverage]: https://coveralls.io/github/netlify/js-client\n[david-img]: https://david-dm.org/netlify/js-client/status.svg\n[david]: https://david-dm.org/netlify/js-client\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/netlify/js-client.git"
  },
  "scripts": {
    "build": "run-s build:*",
    "build:webpack": "webpack",
    "ci": "run-s test build",
    "clean": "rimraf dist coverage",
    "deptree": "depcruise --exclude '^node_modules' --output-type dot src | dot -T svg > site/dist/dependencygraph.svg",
    "prepublishOnly": "npm run build:webpack",
    "report": "nyc report --reporter=text-lcov | coveralls",
    "test": "run-s test:*",
    "test:ava": "nyc --reporter=lcov ava --verbose && nyc report",
    "test:deps": "dependency-check ./package.json --entry \"src/**/!(*.test).js\" --unused --missing --no-dev --no-peer",
    "test:lint": "eslint src",
    "watch": "nyc --reporter=lcov ava --watch"
  },
  "umd:main": "./dist/main.js",
  "unpkg": "./dist/main.js",
  "version": "2.2.0"
}
