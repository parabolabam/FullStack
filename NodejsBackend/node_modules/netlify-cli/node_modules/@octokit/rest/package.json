{
  "_args": [
    [
      "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
      "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli"
    ]
  ],
  "_from": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
  "_id": "@octokit/rest@15.15.1",
  "_inCache": true,
  "_location": "/netlify-cli/@octokit/rest",
  "_phantomChildren": {
    "ms": "2.1.1"
  },
  "_requested": {
    "name": "@octokit/rest",
    "raw": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
    "rawSpec": "https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
    "scope": "@octokit",
    "spec": "https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/netlify-cli"
  ],
  "_resolved": "https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
  "_shasum": "7863f50f7c5753211ea3e29e10b84c93159e9e37",
  "_shrinkwrap": null,
  "_spec": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-15.15.1.tgz",
  "_where": "/home/vlad/Desktop/NodejsProjects/fullStackBranches/backend/NodejsBackend/node_modules/netlify-cli",
  "apidoc": {
    "template": {
      "withCompare": false
    }
  },
  "author": {
    "name": "Gregor Martynus",
    "url": "https://github.com/gr2m"
  },
  "browser": {
    "./lib/get-request-agent.js": false,
    "./lib/request/get-buffer-response.js": "./lib/request/get-buffer-response-browser.js"
  },
  "bugs": {
    "url": "https://github.com/octokit/rest.js/issues"
  },
  "bundlesize": [
    {
      "path": "./dist/octokit-rest.min.js.gz",
      "maxSize": "33 kB"
    }
  ],
  "contributors": [
    {
      "name": "Mike de Boer",
      "email": "info@mikedeboer.nl"
    },
    {
      "name": "Fabian Jakobs",
      "email": "fabian@c9.io"
    },
    {
      "name": "Joe Gallo",
      "email": "joe@brassafrax.com"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://github.com/gr2m"
    }
  ],
  "dependencies": {
    "before-after-hook": "^1.1.0",
    "btoa-lite": "^1.0.0",
    "debug": "^3.1.0",
    "http-proxy-agent": "^2.1.0",
    "https-proxy-agent": "^2.2.0",
    "lodash": "^4.17.4",
    "node-fetch": "^2.1.1",
    "universal-user-agent": "^2.0.0",
    "url-template": "^2.0.8"
  },
  "description": "GitHub REST API client for Node.js",
  "devDependencies": {
    "@gimenete/type-writer": "^0.1.3",
    "@gr2m/node-fetch": "^2.0.0",
    "@octokit/fixtures-server": "^3.0.0",
    "@octokit/routes": "14.6.2",
    "@types/node": "^10.1.2",
    "apidoc": "^0.17.6",
    "bundlesize": "^0.17.0",
    "chai": "^4.1.2",
    "compression-webpack-plugin": "^2.0.0",
    "coveralls": "^3.0.0",
    "cypress": "^3.0.0",
    "dotenv": "^6.0.0",
    "gh-pages-with-token": "^1.0.0",
    "glob": "^7.1.2",
    "mkdirp": "^0.5.1",
    "mocha": "^5.0.0",
    "mustache": "^3.0.0",
    "nock": "^10.0.0",
    "npm-run-all": "^4.1.2",
    "nyc": "^12.0.1",
    "prettier": "^1.14.2",
    "proxy": "^0.2.4",
    "proxyquire": "^2.0.0",
    "semantic-release": "^15.0.0",
    "sinon": "^6.0.0",
    "sinon-chai": "^3.0.0",
    "standard": "^12.0.0",
    "standard-markdown": "^5.0.1",
    "string-to-arraybuffer": "^1.0.0",
    "typescript": "^2.9.2",
    "webpack": "^4.0.0",
    "webpack-bundle-analyzer": "^3.0.0",
    "webpack-cli": "^3.0.0"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.d.ts",
    "index.js",
    "index.js.flow",
    "lib"
  ],
  "homepage": "https://github.com/octokit/rest.js#readme",
  "keywords": [
    "api-client",
    "github",
    "octokit",
    "rest"
  ],
  "license": "MIT",
  "name": "@octokit/rest",
  "nyc": {
    "ignore": [
      "examples",
      "test"
    ]
  },
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public",
    "tag": "latest"
  },
  "readme": "# rest.js\n\n> GitHub REST API client for JavaScript\n\n[![@latest](https://img.shields.io/npm/v/@octokit/rest.svg)](https://www.npmjs.com/package/@octokit/rest)\n[![Build Status](https://travis-ci.org/octokit/rest.js.svg?branch=master)](https://travis-ci.org/octokit/rest.js)\n[![Coverage Status](https://coveralls.io/repos/github/octokit/rest.js/badge.svg)](https://coveralls.io/github/octokit/rest.js)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/rest.js.svg)](https://greenkeeper.io/)\n\n## Usage\n\n### Node\n\nInstall with `npm install @octokit/rest`.\n\n```js\nconst octokit = require('@octokit/rest')()\n\n// Compare: https://developer.github.com/v3/repos/#list-organization-repositories\noctokit.repos.getForOrg({\n  org: 'octokit',\n  type: 'public'\n}).then(({ data, headers, status }) => {\n  // handle data\n})\n```\n\n### Browser\n\n1. Download `octokit-rest.min.js` from the latest release: https://github.com/octokit/rest.js/releases\n\n2. Load it as script into your web application:\n\n   ```html\n   <script src=\"octokit-rest.min.js\"></script>\n   ```\n\n3. Initialize `octokit`\n\n   ```js\n   const octokit = new Octokit()\n\n   // Compare: https://developer.github.com/v3/repos/#list-organization-repositories\n   octokit.repos.getForOrg({\n     org: 'octokit',\n     type: 'public'\n   }).then(({data, headers, status}) => {\n     // handle data\n   })\n   ```\n\n### Client options\n\nAll available client options with default values\n\n<!-- HEADS UP: when changing the options for the constructor, make sure to also\n     update the type definition templates in scripts/templates/* -->\n```js\nconst octokit = require('@octokit/rest')({\n  timeout: 0, // 0 means no request timeout\n  headers: {\n    accept: 'application/vnd.github.v3+json',\n    'user-agent': 'octokit/rest.js v1.2.3' // v1.2.3 will be current version\n  },\n\n  // custom GitHub Enterprise URL\n  baseUrl: 'https://api.github.com',\n\n  // Node only: advanced request options can be passed as http(s) agent\n  agent: undefined\n})\n```\n\n`@octokit/rest` API docs: https://octokit.github.io/rest.js/  \nGitHub v3 REST API docs: https://developer.github.com/v3/\n\n## API Previews\n\nTo take advantage of [GitHubâ€™s API Previews](https://developer.github.com/v3/previews/),\npass a custom `accept` header, which you can do with any endpoint method documented\nin the [API docs](https://octokit.github.io/rest.js/), e.g.\n\n```js\nconst { data: { topics } } = octokit.repos.get({\n  owner: 'octokit',\n  repo: 'rest.js',\n  headers: {\n    accept: 'application/vnd.github.mercy-preview+json'\n  }\n})\n```\n\nMultiple preview headers can be combined by separating them with commas\n\n```js\nconst { data: { topics, codeOfConduct } } = octokit.repos.get({\n  owner: 'octokit',\n  repo: 'rest.js',\n  headers: {\n    accept: 'application/vnd.github.mercy-preview+json,application/vnd.github.scarlet-witch-preview+json'\n  }\n})\n```\n\n## Authentication\n\nMost GitHub API calls don't require authentication. Rules of thumb:\n\n1. If you can see the information by visiting the site without being logged in, you don't have to be authenticated to retrieve the same information through the API.\n2. If you want to change data, you have to be authenticated.\n\n```javascript\n// basic\noctokit.authenticate({\n  type: 'basic',\n  username: 'yourusername',\n  password: 'password'\n})\n\n// oauth\noctokit.authenticate({\n  type: 'oauth',\n  token: 'secrettoken123'\n})\n\n// oauth key/secret (to get a token)\noctokit.authenticate({\n  type: 'oauth',\n  key: 'client_id',\n  secret: 'client_secret'\n})\n\n// token (https://github.com/settings/tokens)\noctokit.authenticate({\n  type: 'token',\n  token: 'secrettoken123'\n})\n\n// GitHub app\noctokit.authenticate({\n  type: 'app',\n  token: 'secrettoken123'\n})\n```\n\nNote: `authenticate` is synchronous because it only sets the credentials\nfor the following requests.\n\n## Pagination\n\nThere are a few pagination-related methods:\n\n- `hasNextPage(response)`\n- `hasPreviousPage(response)`\n- `hasFirstPage(response)`\n- `hasLastPage(response)`\n- `getNextPage(response)`\n- `getPreviousPage(response)`\n- `getFirstPage(response)`\n- `getLastPage(response)`\n\nUsage\n\n```js\nasync function paginate (method) {\n  let response = await method({ per_page: 100 })\n  let { data } = response\n  while (octokit.hasNextPage(response)) {\n    response = await octokit.getNextPage(response)\n    data = data.concat(response.data)\n  }\n  return data\n}\n\npaginate(octokit.repos.getAll)\n  .then(data => {\n    // handle all results\n  })\n```\n\n## Debug\n\nSet `DEBUG=octokit:rest*` for additional debug logs.\n\n## Tests\n\nBefore running any tests you have to start the [fixtures server](https://github.com/octokit/fixtures-server)\n\n```\n$ npm run start-fixtures-server\n```\n\nIn a second terminal, run the tests\n\n```bash\n$ npm test\n```\n\nOr run a specific test\n\n```bash\n$ ./node_modules/.bin/mocha test/scenarios/get-repository-test.js\n```\n\nRun browser tests\n\n```bash\n$ npm run test:browser\n```\n\n**Note**: In order to run the same [scenario tests](test/scenarios) in both Node\nand browser, we simulate the Cypress environment in Node, see [test/mocha-node-setup.js](test/mocha-node-setup.js).\n\nThe examples are run as part of the tests. You can set an `EXAMPLES_GITHUB_TOKEN` environment\nvariable (or set it in a `.env` file) to avoid running against GitHub's rate limit.\n\n## Contributing\n\nWe would love you to contribute to `@octokit/rest`, pull requests are very welcomed!\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## Credits\n\n`@octokit/rest` was originally created as [`node-github`](https://www.npmjs.com/package/github)\nin 2012 by Mike de Boer from Cloud9 IDE, Inc.\nIt was adopted and renamed by GitHub in 2017\n\n## LICENSE\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "release": {
    "publish": [
      "@semantic-release/npm",
      {
        "path": "@semantic-release/github",
        "assets": [
          "dist/*",
          "!dist/*.map.gz"
        ]
      }
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/rest.js.git"
  },
  "scripts": {
    "build": "npm-run-all build:*",
    "build:browser": "npm-run-all build:browser:*",
    "build:browser:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-rest.js --profile --json > dist/bundle-stats.json",
    "build:browser:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-rest.min.js --devtool source-map",
    "build:docs": "node scripts/generate-api-docs",
    "build:flow": "node scripts/generate-flow-types",
    "build:ts": "node scripts/generate-typescript-types",
    "coverage": "nyc report --reporter=html && open coverage/index.html",
    "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
    "deploy-docs": "gh-pages-with-token -d doc",
    "generate-bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
    "generate-routes": "node scripts/generate-routes",
    "postbuild:docs": "apidoc -i doc/ -o doc/",
    "postvalidate:ts": "tsc --noEmit --target es6 test/typescript-validate.ts",
    "prebuild:browser": "mkdirp dist/",
    "prebuild:docs": "mkdirp doc/",
    "pretest": "standard && standard-markdown *.md",
    "prevalidate:ts": "npm run -s build:ts",
    "semantic-release": "semantic-release",
    "start-fixtures-server": "octokit-fixtures-server",
    "test": "nyc mocha test/mocha-node-setup.js \"test/**/*-test.js\"",
    "test:browser": "cypress run --browser chrome",
    "test:examples": "node test/examples.js",
    "validate:ts": "tsc --target es6 index.d.ts"
  },
  "standard": {
    "globals": [
      "after",
      "afterEach",
      "before",
      "beforeEach",
      "cy",
      "describe",
      "expect",
      "it"
    ]
  },
  "types": "index.d.ts",
  "version": "15.15.1"
}
